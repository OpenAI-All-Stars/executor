name: publish

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  DOCKER_TAG: ghcr.io/openai-all-stars/executor:latest

jobs:

    build:
        name: Build
        runs-on: ubuntu-latest

        steps:
        - uses: actions/checkout@v3
        - name: Login
          run: |
            echo ${{ secrets.PAT }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
        - name: Build and Publish
          run: |
            docker build . --tag ${{ env.DOCKER_TAG }}
        - name: Upload docker-compose.yml
          uses: actions/upload-artifact@v3
          with:
            name: docker-compose.yml
            path: docker-compose.yml

    tests:
        needs: build
        name: Tests
        runs-on: python-3.11-buster

        steps:
        - uses: actions/checkout@v3
        - name: Install tox
          run: pip install tox
        - name: Run tests
          run: tox

    deploy:
        needs: tests
        name: Deploy
        runs-on: ubuntu-latest

        steps:
        - name: Download docker-compose.yml from build
          uses: actions/download-artifact@v3
          with:
            name: docker-compose.yml
        - name: install ssh keys
          # check this thread to understand why its needed:
          # <https://stackoverflow.com/a/70447517>
          run: |
            install -m 600 -D /dev/null ~/.ssh/id_rsa
            echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
            ssh-keyscan -H ${{ secrets.SSH_HOST }} > ~/.ssh/known_hosts
        - name: copy docker compose config
          run: scp docker-compose.yml ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:docker-compose.yml
        - name: connect and pull
          run: ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "docker-compose pull && docker-compose up -d && exit"
        - name: cleanup config
          if: always()
          run: ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "rm docker-compose.yml"
        - name: cleanup keys
          if: always()
          run: rm -rf ~/.ssh
